/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import Logs.Login;
import dbConnect.passwordHasher;
import dbConnect.dbConnector;
import dbconnect.Session;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Windows 10
 */
public class CreateUserForm extends javax.swing.JFrame {

    private static String userImagePath = null;
    private static String i_username;

    /**
     *
     * /**
     * Creates new form CreateUserForm
     */
    public CreateUserForm(String username, String imgPath) {
        initComponents();

        this.i_username = username;

        userImagePath = imgPath;
    }

    private void logActivity(int Iid, String action) {
        String sql = "INSERT INTO logs_table (i_id, logs_action, logs_date) VALUES (?, ?, NOW())";
        dbConnector db = new dbConnector();

        try (Connection conn = db.getConnection();
                PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setInt(1, Iid);
            pst.setString(2, action);
            pst.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error logging activity: " + e.getMessage());
        }
    }

    public static String phone, usname;

    public boolean duplicateCheck() {
        dbConnector dbc = new dbConnector();
        String c = cnum.getText().trim();
        String us = username.getText().trim();

        try {
            String query = "SELECT * FROM user WHERE i_username='" + us + "'OR i_phonenumber='" + c + "'";
            ResultSet resultSet = dbc.getData(query);
            if (resultSet.next()) {
                phone = resultSet.getString("i_phone");
                if (phone.equals(c)) {
                    JOptionPane.showMessageDialog(null, "Phone Number is Already Used");
                    cnum.setText("");
                }

                usname = resultSet.getString("i_username");
                if (usname.equals(us)) {
                    JOptionPane.showMessageDialog(null, "Username is Already Used");
                    username.setText("");
                }
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            System.out.println("" + ex);
            return false;
        }
    }

    public boolean updateCheck() {
        dbConnector dbc = new dbConnector();
        String u = IID.getText().trim();
        String c = cnum.getText().trim();
        String us = username.getText().trim();

        try {
            String query = "SELECT * FROM user WHERE (i_username='" + us + "'OR i_phonenumber='" + c + "') AND i_id != '" + u + "'";
            ResultSet resultSet = dbc.getData(query);
            if (resultSet.next()) {
                phone = resultSet.getString("i_phonenumber");
                if (phone.equals(c)) {
                    JOptionPane.showMessageDialog(null, "Phone Number is Already Used");
                    cnum.setText("");
                }

                usname = resultSet.getString("i_username");
                if (usname.equals(us)) {
                    JOptionPane.showMessageDialog(null, "Username is Already Used");
                    username.setText("");
                }
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            System.out.println("" + ex);
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        name1 = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        fname = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        LastName = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        dob1 = new javax.swing.JLabel();
        dob = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        stats1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cnum = new javax.swing.JTextField();
        stats2 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        status = new javax.swing.JComboBox<>();
        stats = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        register = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        cpassword = new javax.swing.JPasswordField();
        IID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        name1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        name1.setText("USER ID :");
        jPanel1.add(name1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 90, 20));

        name.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        name.setText("FIRSTNAME:");
        jPanel1.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 90, 20));

        fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameActionPerformed(evt);
            }
        });
        jPanel1.add(fname, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 290, 30));

        lname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnameActionPerformed(evt);
            }
        });
        jPanel1.add(lname, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 290, 30));

        LastName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        LastName.setText("LASTNAME:");
        jPanel1.add(LastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 80, 20));

        user.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        user.setText("USERNAME:");
        jPanel1.add(user, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, -1));

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });
        jPanel1.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, 290, 30));

        dob1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        dob1.setText("PASSWORD:");
        jPanel1.add(dob1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, -1));

        dob.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        dob.setText("CONFIRM PASSWORD :");
        jPanel1.add(dob, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, -1, -1));

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        jPanel1.add(email, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 290, 30));

        stats1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        stats1.setText("EMAIL:");
        jPanel1.add(stats1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("PHONENUMBER:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 370, -1, -1));

        cnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnumActionPerformed(evt);
            }
        });
        jPanel1.add(cnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 290, 30));

        stats2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        stats2.setText("ACCOUNT TYPE :");
        jPanel1.add(stats2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 120, 20));

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "User", "Admin" }));
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });
        jPanel1.add(type, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, 290, 30));

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Pending" }));
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, 290, 30));

        stats.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        stats.setText("USER STATUS :");
        jPanel1.add(stats, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 450, 110, -1));

        add.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        add.setText("ADD");
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel1.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 100, 30));

        update.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        update.setText("UPDATE");
        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
        });
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 520, 100, 30));

        remove.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        remove.setText("REMOVE");
        remove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeMouseClicked(evt);
            }
        });
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        jPanel1.add(remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 520, 100, 30));

        refresh.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        refresh.setText("REFRESH");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jPanel1.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 520, 100, 30));

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton3.setText("CANCEL");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 520, 100, 30));

        register.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        register.setText("REGISTER");
        register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerActionPerformed(evt);
            }
        });
        jPanel1.add(register, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 520, 100, 30));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Creat User Form");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 300, 30));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 50));
        jPanel1.add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 290, 30));
        jPanel1.add(cpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, 290, 30));

        IID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IID.setEnabled(false);
        jPanel1.add(IID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 290, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameActionPerformed
       
    }//GEN-LAST:event_fnameActionPerformed

    private void lnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lnameActionPerformed

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerActionPerformed

    }//GEN-LAST:event_registerActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        U_Admin ua = new U_Admin(i_username, userImagePath);
        ua.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
       
    }//GEN-LAST:event_updateActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
       
        
    }//GEN-LAST:event_removeActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        
    }//GEN-LAST:event_refreshActionPerformed

    private void cnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cnumActionPerformed

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        dbConnector dbc = new dbConnector();
        String fn = fname.getText().trim();
        String e = email.getText().trim();
        String ln = lname.getText().trim();
        String uname = username.getText().trim();
        String pass = new String(password.getText()).trim();
        String cpass = new String(cpassword.getText()).trim();

        String c = cnum.getText().trim();
        String at = type.getSelectedItem().toString().trim();
        String s = status.getSelectedItem().toString().trim();

        if (uname.isEmpty() || pass.isEmpty() || cpass.isEmpty() || ln.isEmpty() || fn.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please Fill All Boxes");

        } else if (!pass.equals(cpass)) {
            JOptionPane.showMessageDialog(null, "Password Does Not Match");
            //System.out.println("Password ["+password+"] Length: "+password.length());
            //System.out.println("Confirm Password ["+Cpassword+"] Length: "+Cpassword.length());
        } else if (!c.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Phone Must Only Contain Numbers");
        } else if (pass.length() <= 7) {
            JOptionPane.showMessageDialog(null, "Password Must be Exactly 8 Characters Long");
        } else if (c.length() > 15 || c.length() < 11) {
            JOptionPane.showMessageDialog(null, "Invalid Phone num");
        } else if (duplicateCheck()) {
            System.out.println("Duplicate Exists");
        } else {
            try {
                String npass = passwordHasher.hashPassword(password.getText());

                dbc.insertData("INSERT INTO user (i_fname, i_lname, i_username, i_type, i_password, i_phonenumber, status ,i_email) "
                        + "VALUES ('" + fn + "', '" + ln + "', '" + uname + "', '" + at + "','" + npass + "', '" + c + "',  '" + s + "', '" + e + "')");
                JOptionPane.showMessageDialog(null, "Registered succesfully!");

                ResultSet rs = dbc.getConnection().createStatement().executeQuery("SELECT i_id FROM user WHERE i_username = '" + uname + "'");
                if (rs.next()) {
                    int userId = rs.getInt("i_id");
                    logActivity(userId, "Registered new user: " + uname);
                }

                U_Admin ua = new U_Admin(i_username, userImagePath);
                ua.setVisible(true);
                this.dispose();
            } catch (NoSuchAlgorithmException ex) {
                System.out.println("" + ex);
            } catch (SQLException ex) {
                Logger.getLogger(CreateUserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addMouseClicked

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
        dbConnector dbc = new dbConnector();
        dbConnector connector = new dbConnector();
        Session sess = Session.getInstance();
        int userId = 0;
        String uname2 = null;

        String u = IID.getText().trim();
        String fn = fname.getText().trim();
        String ln = lname.getText().trim();
        String uname = username.getText().trim();
        String pass = new String(password.getPassword()).trim();
        String Cpass = new String(cpassword.getPassword()).trim();
        String p = cnum.getText().trim();
        String at = type.getSelectedItem().toString().trim();
        String s = status.getSelectedItem().toString().trim();

        if (uname.isEmpty() || ln.isEmpty() || fn.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill all boxes");
        } else if (!p.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Phone must only contain numbers");
        } else if (p.length() > 15 || p.length() < 11) {
            JOptionPane.showMessageDialog(null, "Invalid phone number");
        } else if (updateCheck()) {
            JOptionPane.showMessageDialog(null, "Username or phone already exists!");
        } else {
            try {
                String query = "SELECT * FROM user WHERE i_id = ?";
                PreparedStatement selectStmt = dbc.getConnection().prepareStatement(query);
                selectStmt.setInt(1, sess.getIid());
                ResultSet rs = selectStmt.executeQuery();

                if (rs.next()) {

                    String npass = rs.getString("i_password"); // keep old password

                    String updateQuery = "UPDATE user SET i_fname = ?, i_lname = ?, i_username = ?, i_password = ?, i_phonenumber = ?, i_type = ?, status = ? WHERE i_id = ?";
                    PreparedStatement updateStmt = dbc.getConnection().prepareStatement(updateQuery);
                    updateStmt.setString(1, fn);
                    updateStmt.setString(2, ln);
                    updateStmt.setString(3, uname);
                    updateStmt.setString(4, npass);
                    updateStmt.setString(5, p);
                    updateStmt.setString(6, at);
                    updateStmt.setString(7, s);
                    updateStmt.setString(8, u);
                    updateStmt.executeUpdate();

                    // Fetch updated info for logging
                    String query2 = "SELECT * FROM user WHERE i_id = ?";
                    PreparedStatement pstmt = connector.getConnection().prepareStatement(query2);
                    pstmt.setInt(1, sess.getIid());
                    ResultSet resultSet = pstmt.executeQuery();

                    if (resultSet.next()) {
                        userId = resultSet.getInt("i_id");
                        uname2 = resultSet.getString("i_username");
                         if (userId != 0 && uname2 != null) {
                        logActivity(userId, "Updated account details for user: " + uname2);
                    }

                    }
                   
                    U_Admin ua = new U_Admin(i_username, userImagePath);
                    ua.setVisible(true);
                    this.dispose();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_updateMouseClicked

    private void removeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeMouseClicked
       String i_username = username.getText();

    if (i_username.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a username.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String url = "jdbc:mysql://localhost:3306/rems";
    String user = "root";
    String pass = "";

    try {
        Connection conn = DriverManager.getConnection(url, user, pass);

        // Get target user (to be deleted)
        String getIdQuery = "SELECT i_id, i_fname, i_lname FROM user WHERE i_username = ?";
        PreparedStatement idStmt = conn.prepareStatement(getIdQuery);
        idStmt.setString(1, i_username);
        ResultSet rs = idStmt.executeQuery();

        int targetUserId = -1;
        
        if (rs.next()) {
            targetUserId = rs.getInt("i_id");
        }
        rs.close();
        idStmt.close();

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            conn.close();
            return;
        }

        // Delete target user
        String sql = "DELETE FROM user WHERE i_username = ?";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setString(1, i_username);

        int rowsDeleted = pstmt.executeUpdate();
        pstmt.close();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "User deleted successfully!");

            // 🟢 Use Session to log the ACTOR's ID, not the deleted user's
            Session session = Session.getInstance();
            int sessionUserId = session.getIid();
            logActivity(sessionUserId, "Deleted User Account: " + username);
        } else {
            JOptionPane.showMessageDialog(this, "Deletion failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        conn.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        
    }//GEN-LAST:event_removeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String imgPath = "path/to/default/image.png";
                new CreateUserForm(i_username, imgPath).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField IID;
    private javax.swing.JLabel LastName;
    public javax.swing.JButton add;
    public javax.swing.JTextField cnum;
    private javax.swing.JPasswordField cpassword;
    private javax.swing.JLabel dob;
    private javax.swing.JLabel dob1;
    public javax.swing.JTextField email;
    public javax.swing.JTextField fname;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JTextField lname;
    private javax.swing.JLabel name;
    private javax.swing.JLabel name1;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton refresh;
    private javax.swing.JButton register;
    private javax.swing.JButton remove;
    private javax.swing.JLabel stats;
    private javax.swing.JLabel stats1;
    private javax.swing.JLabel stats2;
    public javax.swing.JComboBox<String> status;
    public javax.swing.JComboBox<String> type;
    public javax.swing.JButton update;
    private javax.swing.JLabel user;
    public javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
private boolean isValidEmail(String text) {
        String regex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(text);
        return matcher.matches();

    }

    private boolean isNumeric(String text) {
        try {
            Double.parseDouble(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}
